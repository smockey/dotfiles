global !p
from ultisnips_helpers import *
endglobal

snippet gem "gem"
gem '${1}'
endsnippet

snippet puts "debug"
puts "---------> $1 : #{${2:$1}.inspect}"
endsnippet

snippet p-- "Puts"
puts "-- [[ ${1} ]] ----------------------------------------------------------------"
endsnippet

snippet m> "color debug" i
m---------> $1 : #{${2:$1}.inspect}
endsnippet

snippet m-- "color line debug" i
m-- [[ ${1} ]] ----------------------------------------------------------------
endsnippet

snippet red "red debug"
puts "\e[31m$1\e[0m"
endsnippet

snippet green "green debug"
puts "\e[32m$1\e[0m"
endsnippet

snippet yel "yellow debug"
puts "\e[33m$1\e[0m"
endsnippet

snippet blue "yellow debug"
puts "\e[34m$1\e[0m"
endsnippet

snippet pink "yellow debug"
puts "\e[35m$1\e[0m"
endsnippet

snippet cyan "yellow debug"
puts "\e[36m$1\e[0m"
endsnippet

snippet -- "Line comment"
# -- [[ ${1} ]] ----------------------------------------------------------------
endsnippet

snippet == "Thick line comment"
# == [[ ${1} ]] ================================================================
endsnippet

snippet d "def"
def ${1:function_name}${2:(${3:*args})}
	$0
end
endsnippet

snippet .is "inspect" i
.inspect
endsnippet

snippet /(.*)\.tapi/ "comment" ri
`!p snip.rv = match.group(1)`.tap { |o| puts o.inspect }.
endsnippet

snippet /(.*)\.tap/ "comment" ri
`!p snip.rv = match.group(1)`.tap { |o| puts o.${1:inspect} }.
endsnippet

snippet #! "shebang"
#!/usr/bin/env ruby
endsnippet

snippet inc "include"
include ${1:Module}
endsnippet

snippet # "#{}" i
#{$1}
endsnippet

snippet miss "method missing"
def method_missing(meth, *args, &block)
	if meth.to_s =~ /$1/
		$2
	else
		super
	end
end
endsnippet

snippet /^cl?a?/ "class definition" r
class ${1:Name}
	${0:${VISUAL}}
end
endsnippet

snippet times "times" i
times { |${1:i}| $2 }
endsnippet

snippet reduce "reduce" i
reduce { |${1:i}| $2 }
endsnippet

snippet map "map" i
map { |${1:i}| $2 }
endsnippet

snippet -> "lambda"
->(${1:i}) { ${2:${VISUAL}} }
endsnippet
