# -- describe / context --------------------------------------------------------

snippet desc "describe"
describe '${1:subject_name}' do
	${2:${VISUAL}}
end
endsnippet

snippet con "context"
context '${1:context_name}' do
	${2:${VISUAL}}
end
endsnippet

# -- Let -----------------------------------------------------------------------

snippet l "let"
let(:${1:name}) { $2 }
endsnippet

snippet l! "let!"
let!(:${1:name}) { $2 }
endsnippet

snippet lc "let FactoryGirl"
let(:${1:name}) { FactoryGirl.create(:${2:factory}) }
endsnippet

snippet L "let block"
let(:${1:name}) do
	$2
end
endsnippet

snippet L! "let block"
let!(:${1:name}) do
	$2
end
endsnippet

# -- It ------------------------------------------------------------------------

snippet it "it"
it('${1:example title}') { $2 }
endsnippet

snippet ib "it block"
it '${1:example title}'do
	$2
end
endsnippet

snippet its "its"
its(:${1:attribute}) { is_expected.to ${2} }
endsnippet

snippet ie "include_examples"
include_examples '$1'
endsnippet

# -- Expect -------------------------------------------------------------------

snippet e "expect to"
expect(${1:subject}).${2:to} ${3}
endsnippet

snippet eb "expect to (block)"
expect { ${1:subject} }.${2:to} ${3}
endsnippet

snippet ec "expect change"
expect { $1 }
	.to change { $2 }
	.from($3)
	.to($4)
endsnippet

# -- FactoryGirl ---------------------------------------------------------------

snippet fc "FactoryGirl.create"
FactoryGirl.create($1)
endsnippet

snippet fb "FactoryGirl.build"
FactoryGirl.build($1)
endsnippet

snippet trait "trait"
trait :${1:trait} do
	$2
end
endsnippet
