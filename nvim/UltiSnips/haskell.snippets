snippet /^mo?d?/ "Module" r
module ${1:`!p snip.rv = snip.basename`} (
	$2
) where

${0:${VISUAL}}
endsnippet

snippet /^im?p?/ "Import" r
import ${1:Module}
endsnippet

snippet /^qu?a?l?/ "Qualified import, name by last module" r
import qualified ${1:Module} as ${2:alias}
endsnippet

snippet /^deb/ "import Debug.Trace" r
import Debug.Trace
endsnippet

snippet \ "Lambda expression"
\\ ${1:x} -> ${2:expression}
endsnippet

snippet /\(\\\)?/ "Lambda expression" r
(\\ ${1:x} -> ${2:expression})$0
endsnippet

snippet /^de?f?/ "Function definition" r
${1:name} :: ${2:Type} -> ${3:$2}
$1${4} = $0
endsnippet

snippet /^main/ "main" r
main :: IO ()
main = ${1:return ()}
endsnippet

snippet let "let ... in ..."
let ${1:name} = ${2:expression}
	in ${3:${VISUAL}}
endsnippet

snippet where "where x = expression"
where
	${1:name} = ${2:expression}
endsnippet

snippet match "regexp"
[(_:matchResult)] = ${1:string} =~ "${2:pattern}" :: [[String]]
endsnippet

snippet /withF?i?l?e?/ "withFile" r
withFile "${1:filename}" ${2:ReadMode} $ \handle -> do
  list <- lines <$> hGetContents handle
endsnippet
