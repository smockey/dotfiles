global !p
from ultisnips_helpers import *
endglobal

# == Definitions ===============================================================
snippet #! "shebang"
#!/usr/bin/env ruby
endsnippet

snippet fr "frozen_string_literal"
# frozen_string_literal: true

endsnippet

snippet req "require" b
require '$1'
endsnippet

snippet reqr "require_relative" b
require_relative '$1'
endsnippet

snippet inc "include"
include ${1:Module}
endsnippet

snippet gem "gem"
gem '${1}'
endsnippet

snippet c "class definition"
class ${1:`!p snip.rv = camelize(snip.basename)`}

	${0:${VISUAL}}

end
endsnippet

snippet service "service definition"
class ${1:`!p snip.rv = camelize(snip.basename)`}

	include Service

	def call($0)
	end

end
endsnippet

snippet mod "module definition"
module ${1:Name}
	${0:${VISUAL}}
end
endsnippet

snippet miss "method missing"
def method_missing(meth, *args, &block)
	if meth.to_s =~ /$1/
		$2
	else
		super
	end
end
endsnippet

snippet @ "instance_variable" i
@${1} = $1
endsnippet

snippet def "def"
def ${1:function_name}${2:(${3:*args})}
	${0:${VISUAL}}
end
endsnippet

snippet d "def"
def ${1:function_name}
	${0:${VISUAL}}
end
endsnippet

snippet di "def initialize"
def initialize${1:(${2:*args})}
	${0:${VISUAL}}
end
endsnippet

snippet dep "extend Gem::Deprecate"
extend Gem::Deprecate
endsnippet

# == Accessors ================================================================
snippet r "attr_reader"
attr_reader :$1
endsnippet

snippet w "attr_writer"
attr_writer :$1
endsnippet

snippet rw "attr_accessor"
attr_accessor :$1
endsnippet

# == Methods ==================================================================
snippet - "lambda (->)"
->${1:(${2:i})} { ${3:${VISUAL}} }
endsnippet

snippet .times "times" i
.times { |${1:i}| $2 }
endsnippet

snippet .red "reduce" i
.reduce { |${1:i}| $2 }
endsnippet

snippet .map "map" i
.map { |${1:i}| $2 }
endsnippet

snippet .sel "select" i
.select { |${1:i}| $2 }
endsnippet

snippet .tap "tap" i
.tap do |o|
	$1
end
endsnippet

snippet .i "inspect" i
.inspect
endsnippet

snippet . "foo.bar = bar" i
.${1:method} = $1
endsnippet

# == Comments ==================================================================
snippet -- "Line comment"
# -- [[ ${1} ]] ----------------------------------------------------------------
endsnippet

snippet == "Thick line comment"
# == [[ ${1} ]] ================================================================
endsnippet

snippet # "#{}" i
#{$1}
endsnippet

snippet todo "TODO"
# TODO: $1
endsnippet

snippet note "NOTE"
# NOTE: $1
endsnippet

# == Debugging =================================================================
snippet pp "pp"
require 'pp'; pp $1
endsnippet

snippet "> "debug" i
"---------> $1 : #{$1$2}
endsnippet

snippet "-- "line debug" i
"-- [[ ${1:HERE} ]] ----------------------------------------------------------------
endsnippet

snippet p "puts"
puts "$1"
endsnippet

snippet red "red debug"
print "\e[31m"
puts "$1"
print "\e[0m"
endsnippet

snippet gr "green debug"
print "\e[32m"
puts "$1"
print "\e[0m"
endsnippet

snippet yel "yellow debug"
print "\e[33m"
puts "$1"
print "\e[0m"
endsnippet

snippet blue "blue debug"
print "\e[34m"
puts "$1"
print "\e[0m"
endsnippet

snippet pink "pink debug"
print "\e[35m"
puts "$1"
print "\e[0m"
endsnippet

snippet cyan "cyan debug"
print "\e[36m"
puts "$1"
print "\e[0m"
endsnippet

snippet arlog "A::R logger"
# ---- TEMP ----
logger = ActiveRecord::Base.logger.dup
ActiveRecord::Base.logger = Logger.new(STDOUT)
res = begin
	puts "\e[36m-- [[ SQL DEBUG ]] ----------------------------------------------------------------\e[0m"

	${1:${VISUAL}}

end
# ---- TEMP ----
ActiveRecord::Base.logger = logger
res
endsnippet

# == Misc ======================================================================
snippet orn "IAM::ORN"
IAM::ORN.build(
	namespace: '$1',
	owner: $2,
	resource: { type: '$3', id: '$4' }
)
endsnippet
